=
title = Statement
withDown
withUp
=

Statements (##Stat##) is a command to execute by //kut//.

Statements are wrapped in "code statements" (##StatCode##) that beside the
statemente save information about file and line where it appears.

** Empty statement

Scheme: ##;##

** Block

Scheme: ##{ ||Stat||* }##

** Reserved symbol

*** break

Scheme: ##break ;##

Only alowed in ##while## and ##for## loops.

*** continue

Scheme: ##continue ;##

Only alowed in ##while## and ##for## loops.

*** trace

Scheme: ##trace ||:||? exp ;##

Examples:\\
##trace a;##\\
##trace : b + "c";##

*** assert

Scheme: ##assert exp ;##

Example: ##assert a == 3;##

*** return

Scheme: ##return ||Exp||? ;##

Examples:\\
##return;##\\
##return z / 4;##

*** import

Scheme: ##import TkString ||: TkSymbol|| ;##

##TkString## is a file path which can be absolute or relative. It can not
contain dots, finish with ##/## nor be an empty string.

Examples:\\
##import "a/cd";##\\
##import "/home/kut/mod" : kmod;##

*** try

Scheme: ##try Stat catch ( TkSymbol ) Stat ||finally Stat||?##

Examples:\\
##try return 5 / b; catch(e) sys.println(e);##\\
##try { return A[ix]; } catch(e) { sys.println(e); } finally sys.println("ok");##

*** while

Scheme: ##while ( ||Exp||? ) Stat##

Examples:\\
##while () { I! += 1; if (I! > 10) break; }##\\
##while (I! <= 10) I! += 1;##

*** if

Scheme: ##if ( Exp ) Stat ||else Stat||?##

Examples:\\
##if (x > 3) sys.println("Greater");## \\
##if (x > 3) { sys.println("Greater"); } else { sys.println("Not greater"); }##

*** for

Scheme1: ##for ( TkSymbol1 ||, TkSymbol2||? = Exp ) Stat## \\ \\
Scheme2: ##for ( TkSymbol = Exp1 : Exp2 ||: Exp3||? ) Stat##

In the Scheme1 ##Exp## is an string, array, dictionary or iterator,
##TkSymbol1## is bound to each element and ##TkSymbol2## to its index or, in
case of dictionary, to its key.

In the Scheme2 ##Exp1##, ##Exp2## and ##Exp3## solve to an integer whose value
is bound to ##TkSymbol##.

Examples of scheme1:\\
##for (e = "av") sys.println(e);##\\
##for (e = ["a", "v"]) sys.println(e);##\\
##for (e, i = ["a", "v"]) sys.println(math.toStr(i) + "->" + e);##\\
##for (e = {"a": 1, "v": 2}) sys.println(e);##\\
##for (e, k = {"a": 1, "v": 2}) sys.println(k + "->" + math.toStr(e));##\\
##for (i = [0 : 12]) { sys.println(i); }##\\
##for (i = [0 : 12 : 2]) sys.println(i);## \\
##for (e, i = [0 : 12 : 2]) sys.println(math.toStr(i) + "->" + math.toStr(e));##

Examples of scheme2:\\
##for (i = 0 : 12) { sys.println(math.toStr(i)); }##\\
##for (i = 0 : 12 : 2) sys.println(math.toStr(i));## \\
##for (i = 12 : 6 : -2) sys.println(math.toStr(i));##

*** switch

Scheme: ##switch ( Exp ) { ||Exp:Stat;||* ||default:Stat;||? }##

Example: ##switch (v) { 3 : return 3 * 2; default: return 25; }##

** No reseved symbol

*** Function calling

Scheme: ##Exp ( ||Exp||* ) ;##

Examples:\\
##sys.println("a");##\\
##run();##\\
##process[ix](true, z);##

*** Assignement

Scheme: ##TkSymbol = Exp ;##

Example: ##v = 3 + 5;##

*** Binary + assignement

Scheme: ##Exp TkOperator Exp ;##

##TkOperator## is one of ##+= -= *= /= %= &= |=##.
