=
title = Token
withDown
withUp
=

Token is the minimal unit of codification.

When Kut reads a file (module) breaks it up in tokens.

If this task can not be done an error is printed and the program finishes.

** Character

One UTF-8 character. We will use ##C## to reference it.

** Blank

It is a character <= ' '. It is recommended only use blank characters ##\n## and
' '. Several consecutive blanks are equivalent to one.

Blanks only are significative to separate tokens.

We will use ##B## to reference it.

** Line comment

Scheme: ##<(//)> ||C||* \n##

This token starts with the sequence ##<(//)>## and finalizes at the end
of line or at the end of text.

Once read, it is discarded.

** Long comment

Scheme: ##/* ||C||* */##

This token starts with the sequence ##/*## and finalizes with the sequence
##*/##.

In the same way that the line comment, once read, it is discarded.

** ##Bool##

Scheme: ##||true | false||##

Literal values ##true## and ##false##.

It matches the boolean values 'true' and 'false'.

** ##Int##

Scheme: ##||[0 - 9] | _||+## with at least one digit.

Integer not negative value.

It is converted to ##int64_t##.

It is possible to use left ceros and also can be used the character '_' as
separator. However can not be used the decimal sign ('.').

The '-' sign, which is not cosidered part of the token, can be used as
operator minus in an expression.

Examples:

<{c0 ed0
0
23
1234
1_234
12_34 // clumsy bat valid.
0023
}>

** ##Float##

Scheme: ##Int . ||0 - 9||* __||e | E|| ||+ | - ||? || [0 - 9] ||+__##

Foating not negative number.

It is converted to ##double##.

Here also it is possible to use not significative ceros and the character '_'
in the integer part. The decimal sign ('.') is mandatory, but it can not
be the first character.

The exponential notation is allowed (using 'e' or 'E'), but the hexadecimal
one not.

Examples:

<{c0 ed1
0.
23.
1234.12
1_234.12
023.1200
3.12e10
3.12E10
3.12e-3
3.12e+3
}>

** Operators

They are the following sequences of characters:

##; = , . ( ) + - * / ! < > [ ] { } % & | ? : \ == += -= -> *= /= != <= >=
%= &= |= ##

** Symbols

Scheme: ##||[a - z] | [A - Z]|| ||[a - z] | [A - Z] | [0 - 9]||*##

They are sequences of one o more characters with the followings properties:

<{l
  Starts with a letter (a-z) or (A-Z).

  Continues with more letters or digits (0-9).
}>

As conventions should be pointed:

<{l
  Use of 'camel case' for composited symbols (myProgram, longString, etc).

  Use of capitalized symbols for reassignable objects (specialy arrays and maps).
}>

The following symbols are reserved:

<{V
<table><tr><td class="frame1"><pre>
assert break  catch   continue default
else   false  finally for      if
import return switch  trace    true
try    while
</pre></td></tr></table>
}>

Moreover it is recommended not to use module names for local symbols, specially
built-in module names.

** Strings

*** Single string

Scheme1: ##" ||C||* "##

Scheme2: ##' ||C||* '##

It is a sequence of characters between double o single quotes. It can not
spread more than one line.

Inside double quotes, characters ##"## and ##\## mas be escaped (##\"## and
##<(//)>##).

Inside single quotes, characters ##'## and ##\## mas be escaped (##\'## and
##<(//)>##).

It can be used the fallowing sequences of escape:

##\b, \f, \n, \r, \t##

Also it is possible to use unicode sequences ##\uXXXX## (e.g. ##\u00c2##,
##\u00Cd##). It is mandatory to write the four hexadecimal digits.

*** Multiline string

Scheme: ##""" ||C||* """##

It is a sequence of characters between tree double quotes.

Inside the triple double quotes no character is escaped and are read as they
appear in the code.

The text is formatted with the fallowing rules:

<{l1
  If the string starts with ##"""\n##, the intial ##\n## is removed.

  Blanks spaces at left are adjusted.
}>

For example:

<{c0 ed2
  """
    Two things:

      one
      two
  """
}>

is equals to:

##"Two things:\n\n  one\n  two\n"##
