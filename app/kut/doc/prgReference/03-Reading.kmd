=
title = Reading
withDown
withUp
=

(Files in the directory ##reader##)

** Block readers (##reader.(h/c)##)

There are two functions which use a code reader (see
<{h 81-Classes.html#hp:010 Cdr}>):

<{d
  ##reader_read_block##
  Read an array of statements inside brackets.\\
  //NOTE 1: imports are not allowed here.// \\
  //NOTE 2: When this function is called, the token '{' already has been read.//

  ##reader_read_main_block##
  Read the main code of a module. \\
  In particular it creates: \\
  * imports: Map from module identifier to file index. \\
  * heap0: With the module main symbols. \\
  * statements: Array with the module statements.
}>

The statements contains unsolved expressions. That is:

<{l
  Symbols are not solved.

  Functions calls are not run.

  Functions have empty imports, empty heap0 and empty heaps.

  There are not //empty//, //break// nor //continue// expressions. However
  //empty// expressions are created internally as part of other not empty
  expressions.
}>

** Statement reader (##st_reader.(h(c)##)

Read a statement from a code reader (see <{h 81-Classes.html#hp:010 Cdr}>).
Every statement is a ##StatCode## which wraps a single ##Stat## (see
<{h 81-Classes.html#hp:004 StatCode}> and <{h 81-Classes.html#hp:003 Stat}>).

Reading follows the next process:

<{V
<ul>
<li>Try to read the next token (<i>tk</i>).
  <ul>
  <li>If end of text is reached returns a <code>stat_end</code>.
  <li>Oterwise:
    <ul>
    <li>If <i>tk</i> is a comment, it is skipped, and the next token is read.
    </li>
    <li>If <i>tk</i> is a symbol, it is read (see bellow).</li>
    <li>If <i>tk</i> is ';', returns a <code>stat_empty</code>.</li>
    <li>If <i>tk</i> is '{', returns a <code>stat_block</code>.</li>
    <li>If <i>tk</i> is '}', returns a <code>stat_block_close</code>.</li>
    <li>Otherwise throws an exception.</li>
    </ul>
  </li>
  </ul>
</li>
</ul>
}>

Symbols are read in the following order:

//(NOTE: 'Optional elments' are underlined, 'no code elements' are in italics,
blanks are not significative.)//

<{d
  ##stat_break##
  Scheme: ##break;##]

  ##stat_continue##
  Scheme: ##continue;##]

  ##stat_trace##
  Scheme: ##trace __:__ //expression//;##

  ##stat_assert##
  Scheme: ##assert //expression//;##

  ##stat_return##
  Scheme: ##return __//expression//__;##

  ##stat_import##
  Scheme: ##import //string// __: //symbol//__;##\\ \\
  //string// is a module path.\\
  //symbol// is the optional symbol used inside the code. If it is not
    indicated, the base of the module path is used. \\ \\
  //NOTE: When reading imports, its path is checked to verify if it exists in
  the file system.//

  ##stat_try##
  Scheme: ##try //statement1// catch (//symbol//) //statement2//
    __finally //statement3//__##\\ \\
  //statement1// will be run.\\
  //symbol// point to a string with a message of error if //statement1// fails.\\
  //statement2// will be run if //statement1// fails. \\
  //statement3// will be run in any case after //statement1// or
    //statement2//.\\ \\
  //NOTE: ##catch## or ##finally## without ##try## throw exceptions.//

  ##stat_while##
  Scheme: ##While (__//expression//__) //statement//##
  //expression// is an optional boolean, string or array expression.

  ##stat_if##
  Scheme: ##if (//expression//) //statement1// __else //statement2//__## \\
  //expression// is a boolean, string or array expression. \\ \\
  //NOTE: ##else## without ##if## throws exception.//

  ##stat_for##
  Scheme1: ##for (//symbol1//__, //symbol2//__ = //expression//) //statement//## \\
  Scheme2: ##for (//symbol// = //expression1//://expression2//__://expression3__//)
    statement## \\ \\
  In Scheme 1: \\
  //expression// is an array or iterator expression. \\
  //symbol1// point to the collection element.\\
  //symbol2// is the element number in 'base 0'.\\ \\
  In Scheme 2: \\
  //symbol// point to a counter.\\
  //expression1//, //expression2// and //expression3// are an integer expression.\\

  ##stat_switch##
  Scheme: ##switch (//expression//) {
    ||//exps//://stats//||* __default://stat//__ }## \\ \\
  //exps:stats// are optional pairs of 'expressions - statements'\\
  ##default:##//stat// is an optional last entry.
}>

If the symbol is not in the previous ones, it is completed with its possible
continuations (e.g: ##sys.print##, ##A[0]##, ##D["a"].f(z)##).
See <{h #continuations continuations}>.

After the completed symbol can come out:

<{d
  ##;##
  A ##stat_func## is returned.

  ##//Asignation symbol//##
  A ##stat_assign## or one of ##stat_xxx_as## is returned.
}>

Otherwise an exception is thrown.

<{v <a name="continuations"></a>}>

** Continuations reader (##pt_sq_pr_reader.(h/c)##)

Continuations are sequences of tokens that can follow to symbols. These
continuations can not exist or go on without limit.

A continuation can be:

<{d
  ##.//symbol//##
  (e.g. ##sys.print##)

  ##!##
  (e.g. ##A!##)

  ##[//expression//]##
  (e.g. ##A[23]##)

  ##[//__expression1__:__expression2__//]##
  (e.g. ##tx[:]##, ##tx[:3]##, ##tx[5:]##, ##tx[0:12]##) \\ \\
  //NOTE: The operator ':' is mandatory.// \\ \\

  ##(__//expression//__||, //expression//||*)## \\ \\
  (e.g. ##f()##, ##fn(a)##, ##f(12, zt, "yes")##)
}>

** Expression reader (##ex_reader.(h/c)##)

Scheme: ##//fexp1//||//operator fexp//||*__?//exp1//://exp2//__##\\ \\

//fexp1// and //fexp// are a final expressions.
//opeerator// is a binary operator.
//exp1// and //exp2// are normal expressions.

Final expressions are:

<{d
  ##(//expression//)##
  Parentheses are removed and //expression// is returned.

  ##exp_not##
  Scheme: ##!//fexp//## \\ \\
  //fexp// is a final expression with continuations.

  ##exp_minus##
  Scheme: ##-//fexp//## \\ \\
  //fexp// is a final expression with continuations.

  ##exp_array##
  Scheme: ##[__//expression1//__||, //expression//||*]##

  ##exp_range##
  Scheme: ##[//expression1//://expression2//__://expression3//__]## \\ \\

  //expressions// are integers.

  ##exp_map##
  Scheme: ##{__//key1//://expression1//__||, //key//://expression//||*}## \\ \\
  //key1// and //key// are strings or symbols.

  ##exp_function##
  Scheme: ##\__//symbol1//__||, symbol||* -> statement##

  ##exp_bool##
  Scheme: ##token_bool##

  ##exp_int##
  Scheme: ##token_int##

  ##exp_float##
  Scheme: ##token_float##

  ##exp_string##
  Scheme: ##token_string##

  ##exp_switch##
  Scheme: ##switch (//expression//) {
    ||//exp1//://exp2//||* __default://exp//__ }## \\ \\
  //exp1:exp2// are optional pairs of 'expression - expression'\\
  ##default:##//exp// is an optional last entry.

  ##exp_sym##
  Scheme: ##//symbol//##
}>

A final expression can be completed with continuations (e.g. ##mod.val##,
##A[0]##, ##D["a"].f(z)##). See <{h #continuations continuations}>.

** Token reader (##cdr/cdr.(h.c)##)

Read tokens. See <{h 81-Classes.html#hp:010 class Cdr}>.