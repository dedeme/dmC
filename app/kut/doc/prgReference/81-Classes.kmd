=
title = Classes
withDown
withUp
=

** Token (##reader/token.(h/c)##)

Immutable class of Kut tokens.

It has two fields:

<{v <div class="frame1"> }>

<{d
  type
    One of TOKEN_BOOL, TOKEN_INT, TOKEN_FLOAT, TOKEN_STRING,
    TOKEN_LINE_COMMENT, TOKEN_COMMENT, TOKEN_SYMBOL or TOKEN_OPERATOR. \\
    Accesible only trough functions ##token_is_xxxx##.

  value
    Accesible only trough functions ##token_get_xxxx##.
}>
<{v </div>}>

Also has several constructors ##token_xxxx##, one for each type.

The type of a ##Token## object can be passed to string with ##token_type_to_str##.

Its value also can be passed with ##token_to_str##.

There are several auxiliar function type ##token_is_xxxx##.

** Exp (##exp.(h/c)##)

Immutable class of Kut expressions.

It has two fields:

<{v <div class="frame1"> }>

<{d
  type
    One of EXP_BREAK, EXP_CONTINUE, \\
    EXP_BOOL, EXP_INT, EXP_FLOAT, EXP_STRING, EXP_OBJECT, \\ 
    EXP_ARR, EXP_MAP, EXP_FUNC, EXP_SYM, \\
    EXP_RANGE, \\
    EXP_PT, EXP_SQ, EXP_SLICE, EXP_PR,
      //(Point, Square braket - subindex, Square bracket - slice, Parentheses)// \\
    EXP_SWITCH, \\
    EXP_NOT, EXP_MINUS, \\
    EXP_ADD, EXP_SUB, EXP_MUL, EXP_DIV, EXP_MOD, \\
    EXP_AND, EXP_OR, \\
    EXP_GREATER, EXP_GREATER_EQ, EXP_LESS, EXP_LESS_EQ, \\ 
    EXP_EQ, EXP_NEQ \\
    or EXP_TERNARY. \\
    Accesible only trough functions ##exp_is_xxxx##.

  value
    Accesible only trough functions ##exp_get_xxxx##.
}>
<{v </div>}>

Also has several constructors ##exp_xxxx##, one for each type.

*** Empty expression.

An empty expression can be returned with ##exp_empty## and checked with
##exp_is_empty##.

*** Auxiliar functions.

The type of a ##Exp## object can be passed to string with ##exp_type_to_str##.

An empty expression returns ##object## with ##exp_type_to_str##.

Its value also can be passed with ##exp_to_str## or ##exp_to_js##. The difference
is that the last one shows the strings 'escaped' and between quotes.

An empty expression returns ##<empty expression>## with ##exp_to_str## or
##exp_to_js##,

Bisades this, ##Exp## have two auxiliar functions:

<{d
  ##exp_is_binary##
    Which reports if an expression is binary operator.

  ##exp_is_function_call##
    Which reports if an expression is if of type 'function call'. Such functions
    type is formed by expressions EXP_PR but also by chained expressions
    EXP_PT which end in a EXP_PR (module functions).
}>

** Stat (##stat.(h/c)##)

Immutable class of Kut statements.

It has two fields:

<{v <div class="frame1"> }>

<{d
  type
    One of END, EMPTY, \\
    ASSIGN, ADDAS, SUBAS, MULAS, DIVAS, MODAS, ANDAS, ORAS, \\
    FUNCTION, BLOCK, \\
    BLOCK_CLOSE, BREAK, CONTINUE, \\
    TRACE, ASSERT, RETURN, \\
    TRY, WHILE, IF, ELSE, FOR, FOR_IX, FOR_R, FOR_RS, SWITCH \\
    or IMPORT \\
    Accesible only trough functions ##stat_is_xxxx##.

  value
    Accesible only trough functions ##stat_get_xxxx##.
}>
<{v </div>}>

Also has several constructors ##stat_xxxx##, one for each type.

The type of a ##Stat## object can be passed to string with ##stat_type_to_str##.

Its value also can be passed with ##stat_to_str##.

** StatCode (##stat.(h/c)##)

It is a register of a ##Stat## plus its place in file (File index and line
number).

** Heap (##heap.(h/c)##)

Map from symbols to solved expressions.

When running code an array of Heap is created. Its intial entry is the heap of
module.

After that each new block of code exectuted generate its own heap. This is
added at the beginning of the array, so that the last entry is the initial one.

When a symbol is beeing solved, the array is read from the entry '0' to the
last one, using the first found match.

** Heap0 (##heap0.(h/c)##)

Map from symbols to unsolved expressions.

It is created when the module is read. Each unsolved expression carries attached
the number of line where was found.

** Module (##module.(h/c)##)

Immutable class with code read from a .kut file, its imports and heaps.

It is a record of:

<{d
  //Imports//
  Map from module identifiers to file index. (see <{h 80-Objects.html#hp:001
  fileix}>)

  //Heap0//
  Map from expression identifier to the corresponding raw expression (expression
  without solving).

  //Heap//
  Map from expression identifier to the corresponding solved expression.

  //Statements//
  Array with the ##StatCodes## of module.
}>

//NOTE: In the reading process only values of 'Heap0' are set. They are solved
and passed to 'Heap' at run time.//


** Modules (##module.(h/c)##)

Mutable array of modules loaded.

Each index match the file index wose code is embed into the pointed module.
That is:

<{V
<div class="frame1"><pre>
  - A module has an index (ix) in the list.
  - A module is defined in a file 'f'.
  - 'f' has a file index 'fix'.
  - 'ix' == 'fix'
</pre></div>
}>

Each array entry can be:

<{V
<div class="frame1"><pre>
  - option_none(). There is no module with such index.
  - option_some(option_none()). There is a module with such index, but
    it is not defined yet.
  - option_some(option_some(module)). There us a defined module with such
    index.
</pre></div>
}>

Not defined modules are added with ##modules_add##. After being added, a new
addition of the same module is prevented.

When the module is read its value is defined with ##modules_set##.

//Note: Unless the main module, modules are read in the 'run process' when it
is necessary.//

** Function (##function.(h/c)##)

Immutable class with normal function data.

It is a record of:

<{d
  //Imports//
  Map from module identifiers to file index. (see <{h 80-Objects.html#hp:001
  fileix}>)

  //Heap0//
  Heap0 of module where it was defined.

  //Heaps//
  Active heaps in the point in thah was defined.

  //Variables//
  Array with function paramenter symbols.

  //Statement//
  Function statement.
}>

When a module is read, functions are created with ##function_new##.

** Cdr (##reader/cdr/cdr.(h/c)##)

Mutable class for code reading.

It constructor (##cdr_new##) links a code file index with its code.

It works reading one token in advance, so when the object is created, the
first token is read (throwing the correponding exception in its case).

It have the following features:

<{l
  Have four functions (##cdr_failxxx##) to make errors contextualized with
    'file - index' references.

  Give the current token line.

  Give the next token line.

  Read the current token and advance to the next one, throwing exception if
  the end of text is reached.(##cdr_read_token##)

  Read the current token in an ##Opot## and advance to the next one, returning
  an ##opt_none## if the end of text is reached.(##cdr_read_token_op##)

  Read the current character and advance to the next one. (##cdr_read_char##)

  Unread the current character, unless it is the first one. (##cdr_unread_char##)
}>

The last two functions are intended for own consume.

Beside this features there are several functions ##cdr_next_token_is_xxxx## to
know the next token to be read.

//NOTE: files ##comment_reader.c##, ##number_reader## and ##string_reader##
  are privates to ##Cdr## use.//



