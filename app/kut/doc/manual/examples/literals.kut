
// BOOLEANS

bool1 = true;
bool2 = false;
sys.assert(bool1 != bool2);

// INTEGERS

i1 = 0;
i2 = -0;
i3 = 11892;
i4 = -11_892;
sys.assert(i1 == i2);
sys.assert(i3 == -i4);

// Wrong integers
// +115
// --23
// 2.1 -> this number is float.

// FLOATS

f1a = 0.;
f1b = -0.0;
f1c = 0.0e0;
f1d = 0.0e-0;
sys.assert(f1a == f1b);
sys.assert(f1a == f1c);
sys.assert(f1a == f1d);

f2a = 100.02;
f2b = -100.02;
f2c = 10_002.e-2;
f2d = 1.0002e+2;
f2e = 0.10002E3;
sys.assert(f2a == -f2b);
sys.assert(f2a == f2c);
sys.assert(f2a == f2d);
sys.assert(f2a == f2e);

// Wrong floats
// .12 -> starts with '.'.
// +1.2 -> starts with '-'.
// 123 -> this number is integer.
// 100e3 -> '.' is mising before 'e'.
// 100.E -> There must be one digit at least after 'e|E'.

// STRINGS

s1a = "";
s1b = '';
sys.assert(s1a == s1b);
sys.assert(str.len(s1a) == 0);
sys.assert(arr.size(str.toRunes(s1a)) == 0);

s2a = "ab€c\"'\u00f7n\nLine 2";
s2b = 'ab€c"\'\u00f7n\nLine 2';
sys.assert(s2a == s2b);
sys.assert(str.len(s2a) == 18);
sys.assert(arr.size(str.toRunes(s2a)) == 15);

s3a = "xabcd";
sys.assert(s3a[1:4] == "abc");
sys.assert(str.fromRunes(str.toRunes(s3a)[1:4]) == "abc");
sys.assert(s3a[4] == "d");
sys.assert(str.fromRunes(str.toRunes(s3a)[1:4]) == "abc");
sys.assert(str.fromRunes([str.toRunes(s3a)[4]]) == "d");

s3b = "x€abcd";
sys.assert(s3b[1:4] == "€");
sys.assert(str.fromRunes(str.toRunes(s3b)[1:4]) == "€ab");
sys.assert(s3b[5] == "b");
sys.assert(str.fromRunes(str.toRunes(s3b)[3:4]) == "b");
sys.assert(str.fromRunes([str.toRunes(s3b)[3]]) == "b");
// FAIL
sys.test(bytes.toArr(bytes.fromStr(s3b[1])), [226]);
sys.assert(str.fromRunes([str.toRunes(s3b)[1]]) == "€");

s4a = """
  a\b1"2"3
  b""";
s4b = "a\\b1\"2\"3\nb";
sys.assert(s4a == s4b);

s5a = """a
  b""";
s5b = """
a
  b""";
s5c = "a\n  b";
sys.assert(s5a == s5b);
sys.assert(s5a == s5c);

s6a = """
  a
b""";
s6b = "  a\nb";
sys.assert(s6a == s6b);

s7a = """
  a
  b
""";
s7b = "a\nb\n";
sys.assert(s7a == s7b);
