
{
  {
    v = [false];
    msg = ["msg"];

    if (v[0]) msg[0] = "msgIf";
    sys.test(msg[0], "msg");

    if (v[0]) msg[0] = "msgIf";
    else msg[0] = "msgElse";
    sys.test(msg[0], "msgElse");

    v[0] = true;

    if (v[0]) { msg[0] = "msgIf"; }
    sys.test(msg[0], "msgIf");

    if (v[0]) {
      msg[0] = "msgIf2";
    } else {
      msg[0] = "msgElse";
    }
    sys.test(msg[0], "msgIf2");
  }
  {
    rOp = [""];

    switch (3) {
      3 + 1: rOp[0] = "1";
      3 + 0: rOp[0] = "2";
      3 - 1: rOp[0] = "3";
    }
    sys.test(rOp[0], "2");

    switch (4 * 2) {
      0: rOp[0] = "01";
      1: rOp[0] = "02";
      2: rOp[0] = "03";
    }
    sys.test(rOp[0], "2");

    switch (4 * 2) {
      0: rOp[0] = "01";
      1: rOp[0] = "02";
      2: rOp[0] = "03";
      default: rOp[0] = "08";
    }
    sys.test(rOp[0], "08");

    // Use as multiple ifs.

    // This
    rOp[0] = "";
    switch (true) {
      3 > 5 : rOp[0] = "A";
      3 == 5 : rOp[0] = "B";
      3 < 5 : rOp[0] = "C";
      default: rOp[0] = "D";
    }
    sys.test(rOp[0], "C");

    // is equals to
    rOp[0] = "";

    if (3 > 5) rOp[0] = "A";
    else if (3 == 5) rOp[0] = "B";
    else if (3 < 5) rOp[0] = "C";
    else rOp[0] = "D";

    sys.test(rOp[0], "C");
  }
  {
    xV = [10];
    sumV = [0];
    while (xV[0] < 20) {
      sumV[0] += xV[0];
      xV[0] += 1;
    }
    sys.test(sumV[0], 145);

    xV[0] = 10;
    sumV[0] = 0;
    while () {
      if (xV[0] >= 20) break;
      sumV[0] += xV[0];
      xV[0] += 1;
    }
    sys.test(sumV[0], 145);

    xV[0] = 10;
    sumV[0] = 0;
    while () {
      if (xV[0] >= 20) break;
      if (xV[0] % 2 == 0) {
        xV[0] += 1;
        continue;
      }
      sumV[0] += xV[0];
      xV[0] += 1;
    }
    sys.test(sumV[0], 75);

    while () break;
  }
  {
    sumV = [0];
    A = [10, 20, 30];
    it = A.toIter();
    for (e = A) sumV[0] += e;
    sys.test(sumV[0], 60);
    for (e = it) sumV[0] -= e;
    sys.test(sumV[0], 0);

    it2 = A.toIter();
    for (i, e = A) sumV[0] += i;
    sys.test(sumV[0], 3);
    for (i, e = it2) sumV[0] -= i;
    sys.test(sumV[0], 0);

    D = {"one": 1, "two": 2};
    for (e = D) sumV[0] += e;
    sys.test(sumV[0], 3);
    keysV = [""];
    for (k, e = D) {
      keysV[0] += k;
      sumV[0] -= e;
    }
    sys.test(keysV[0], "onetwo");
    sys.test(sumV[0], 0);
  }
  {
    sumV = [0];
    for (i = 4 : 4) sumV[0] += i;
    sys.test(sumV[0], 0);
    for (i = 0 : 4) sumV[0] += i;
    sys.test(sumV[0], 6);
    for (i = 4 : 5) sumV[0] += i;
    sys.test(sumV[0], 10);

    sumV[0] = 0;
    for (i = 5 : 4 : 1) sumV[0] += i;
    sys.test(sumV[0], 0);
    for (i = 0 : 4 : 1) sumV[0] += i;
    sys.test(sumV[0], 10);
    for (i = 4 : 5 : 1) sumV[0] += i;
    sys.test(sumV[0], 19);

    sumV[0] = 0;
    for (i = 0 : 10 : 3) sumV[0] += i;
    sys.test(sumV[0], 18);
    for (i = 0 : -9 : -3) sumV[0] += i;
    sys.test(sumV[0], 0);
  }
  {
    V = [0];

    // Without exception.
    try {
      V[0] += 1;
    } catch (e) {
      V[0] += 2;
    }
    sys.test(V[0], 1);

    // With cached exception.
    V[0] = 0;
    try {
      V[0] += 1;
      throw("fail");
      // V[0] += 1; // <- No allowed after throw.
    } catch (e) {
      sys.test(e[-4:], "fail");
      V[0] += 2;
    }
    sys.test(V[0], 3);

    // Rethrowing a cached exception.
    V[0] = 0;
    try {
      try {
        V[0] += 1;
        throw("fail");
        // V[0] += 1; // <- No allowed after throw.
      } catch (e) {
        V[0] += 2;
        sys.test(e[-4:], "fail");
        throw("error");
        // V[0] += 2;  // <- No allowed after throw.
      }
    } catch (e) {
      sys.test(e[-5:], "error");
      V[0] += 8;
    }
    sys.test(V[0], 11);

    // Loop without exception.
    V[0] = 0;
    while (V[0] < 9) {
      try {
        V[0] += 1;
      } catch (e) {
        V[0] += 2;
      }
    }
    sys.test(V[0], 9);

    // Loop without exception and break in the try block.
    V[0] = 0;
    while (V[0] < 9) {
      try {
        V[0] += 1;
        break;
        // V[0] += 1; // Not allowed after continue
      } catch (e) {
        V[0] += 2;
      }
    }
    sys.test(V[0], 1);

    // Loop without exception and continue in the try block.
    V[0] = 0;
    while (V[0] < 9) {
      try {
        V[0] += 1;
        continue;
        // V[0] += 1; // Not allowed after continue
      } catch (e) {
        V[0] += 2;
      }
    }
    sys.test(V[0], 9);

    // Loop with excetion cached and break.
    V[0] = 0;
    while (V[0] < 9) {
      try {
        throw("fail");
        // V[0] += 1; // <- No allowed after throw.
      } catch (e) {
        sys.test(e[-4:], "fail");
        V[0] += 2;
        break;
      }
    }
    sys.test(V[0], 2);

    // Try without exception and with return.
    V[0] = 0;
    //: [|]
    fn0 = \ -> {
      try {
        V[0] += 1;
        return;
      } catch (e) {
        V[0] += 2;
      }
    };
    fn0();
    sys.test(V[0], 1);

    // Try with cached exception and with return in the catch block.
    V[0] = 0;
    //: [|]
    fn1 = \ -> {
      try {
        throw("fail");
        // V[0] += 1; // <- No allowed after throw.
      } catch (e) {
        sys.test(e[-4:], "fail");
        V[0] += 2;
        return;
      }
      // v[0] += 3; // <- not Allowed after throw or return.
    };
    fn1();
    sys.test(V[0], 2);
  }
}
