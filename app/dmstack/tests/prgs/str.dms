// Copyright 07-Sep-2019 ºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// String tests

(
  // starts-ends

  "ab" "" str,starts? assert
  "" "" str,starts? assert
  "ab" "a" str,starts? assert
  "ab" "ab" str,starts? assert
  "" "b" str,starts? ! assert
  "ab" "b" str,starts? ! assert
  "ab" "abc" str,starts? ! assert

  "ab" "" str,ends? assert
  "" "" str,ends? assert
  "ab" "a" str,ends? ! assert
  "ab" "ab" str,ends? assert
  "" "b" str,ends? ! assert
  "ab" "b" str,ends? assert
  "ab" "cba" str,ends? ! assert

  // index - lastIndex

  "ab" "a" str,index 0 expect
  "" "a" str,index -1 expect
  "ab" "b" str,index 1 expect
  "ab" "c" str,index -1 expect
  "ab" "" str,index 0 expect
  "" "" str,index 0 expect
  "ab" "abc" str,index -1 expect
  "abcd" "bc" str,index 1 expect
  "abcd" "bcd" str,index 1 expect
  "abcd" "d" str,index 3 expect
  "abcd" "d" 0 str,indexFrom 3 expect
  "abcd" "d" 2 str,indexFrom 3 expect
  "abcde" "d" 4 str,indexFrom -1 expect
  "abcd" "ad" str,index -1 expect

  "ab" "a" str,lastIndex 0 expect
  "abac" "a" str,lastIndex 2 expect
  "" "a" str,lastIndex -1 expect
  "ab" "b" str,lastIndex 1 expect
  "abdb" "b" str,lastIndex 3 expect
  "ab" "c" str,lastIndex -1 expect
  "ab" "" str,lastIndex 2 expect
  "" "" str,lastIndex 0 expect
  "ab" "abc" str,lastIndex -1 expect
  "abcd" "bc" str,lastIndex 1 expect
  "abcdbc" "bc" str,lastIndex 4 expect
  "abcd" "bcd" str,lastIndex 1 expect
  "abcd" "d" str,lastIndex 3 expect
  "abcddd" "d" str,lastIndex 5 expect
  "abcd" "ad" str,lastIndex -1 expect

  // get - sub - left - right

  "abc" 0 str,get "a" expect
  "abc" 1 str,get "b" expect
  "abc" 2 str,get "c" expect
  "ab" 1 str,left r =
  "a" r expect
  r "b" + -2 -1 str,sub r =
  "a" r expect
  r "b" + 0 0 str,sub r =
  "" r expect
  r "ab" + -1 0 str,sub r =
  "" r expect
  r "ab" + 2 2 str,sub r =
  "" r expect
  r "ab" + 0 2 str,sub r =
  "ab" r expect
  r 1 2 str,sub r =
  "b" r expect
  r 1 str,right r =
  "" r expect
  r "ab" + 0 str,right r =
  "ab" r expect
  r -1 str,right r =
  "b" r expect
  "" 0 str,left "" expect
  "abc" 0 str,left "" expect
  "abc" 1 str,left "a" expect
  "abc" 3 str,left "abc" expect
  "" 0 str,right "" expect
  "abc" 0 str,right "abc" expect
  "abc" 1 str,right "bc" expect
  "abc" 3 str,right "" expect

  // code - fromCode - runeCode - fromRuneCode

  "a" str,code 97 expect
  97 str,fromCode "a" expect
  "ñ" str,runeCode 50097 expect
  50097 str,fromRuneCode "ñ" expect
  "世" str,runeCode str,fromRuneCode "世" expect

  // trim - ltrim - rtrim

  "" str,trim "" expect
  " " str,trim "" expect
  "   " str,trim "" expect
  " a" str,trim "a" expect
  "a " str,trim "a" expect
  " a " str,trim "a" expect
  " a   " str,trim "a" expect
  "   a " str,trim "a" expect
  "   a   " str,trim "a" expect
  "ab c" str,trim "ab c" expect
  " ab c" str,trim "ab c" expect
  "ab c " str,trim "ab c" expect
  " ab c " str,trim "ab c" expect
  "   ab c " str,trim "ab c" expect
  " ab c   " str,trim "ab c" expect
  "    ab c   " str,trim "ab c" expect
  "" str,ltrim "" expect
  " " str,ltrim "" expect
  "   " str,ltrim "" expect
  " a" str,ltrim "a" expect
  "a " str,ltrim "a " expect
  " a " str,ltrim "a " expect
  " a   " str,ltrim "a   " expect
  "   a " str,ltrim "a " expect
  "   a   " str,ltrim "a   " expect
  "ab c" str,ltrim "ab c" expect
  " ab c" str,ltrim "ab c" expect
  "ab c " str,ltrim "ab c " expect
  " ab c " str,ltrim "ab c " expect
  "   ab c " str,ltrim "ab c " expect
  " ab c   " str,ltrim "ab c   " expect
  "    ab c   " str,ltrim "ab c   " expect
  "" str,rtrim "" expect
  " " str,rtrim "" expect
  "   " str,rtrim "" expect
  " a" str,rtrim " a" expect
  "a " str,rtrim "a" expect
  " a " str,rtrim " a" expect
  " a   " str,rtrim " a" expect
  "   a " str,rtrim "   a" expect
  "   a   " str,rtrim "   a" expect
  "ab c" str,rtrim "ab c" expect
  " ab c" str,rtrim " ab c" expect
  "ab c " str,rtrim "ab c" expect
  " ab c " str,rtrim " ab c" expect
  "   ab c " str,rtrim "   ab c" expect
  " ab c   " str,rtrim " ab c" expect
  "    ab c   " str,rtrim "    ab c" expect

  // split - splitTrim - join

  "" ";" str,split ";" str,join "" expect
  ";" ";" str,split ";" str,join ";" expect
  "ab" ";" str,split ";" str,join "ab" expect
  "ab;" ";" str,split ";" str,join "ab;" expect
  "ab;c;de" ";" str,split ";" str,join "ab;c;de" expect
  ";--" ";--" str,split ";--" str,join ";--" expect
  "ab" ";--" str,split ";--" str,join "ab" expect
  "ab;--" ";--" str,split ";--" str,join "ab;--" expect
  "ab;--c;--de" ";--" str,split ";--" str,join "ab;--c;--de" expect
  "ab ;--  c \t ;--  de" ";--" str,split ";--" str,join
    "ab ;--  c \t ;--  de" expect
  "" ";" str,splitTrim ";" str,join "" expect
  ";" ";" str,splitTrim ";" str,join ";" expect
  "ab" ";" str,splitTrim ";" str,join "ab" expect
  "ab;" ";" str,splitTrim ";" str,join "ab;" expect
  "ab;c;de" ";" str,splitTrim ";" str,join "ab;c;de" expect
  ";--" ";--" str,splitTrim ";--" str,join ";--" expect
  "ab" ";--" str,splitTrim ";--" str,join "ab" expect
  "ab;--" ";--" str,splitTrim ";--" str,join "ab;--" expect
  "ab;--c;--de" ";--" str,splitTrim ";--" str,join "ab;--c;--de" expect
  "ab ;--  c \t ;--  de" ";--" str,splitTrim ";--" str,join
    "ab;--c;--de" expect
  "" "" str,split dup size 0 expect; "" str,join "" expect
  "abñ" "" str,split dup size 3 expect; "" str,join "abñ" expect

  // replace

  "" "." "" str,replace "" expect
  "." "." "" str,replace "" expect
  "f.j" "." "" str,replace "fj" expect
  "f.j." "." "" str,replace "fj" expect
  "" "." "," str,replace "" expect
  "." "." "," str,replace "," expect
  "f.j" "." "," str,replace "f,j" expect
  "f.j." "." "," str,replace "f,j," expect
  "" ".." "---" str,replace "" expect
  ".." ".." "---" str,replace "---" expect
  "f..j" ".." "---" str,replace "f---j" expect
  "f.j.." ".." "---" str,replace "f.j---" expect

  // utf8

  "cañón | a\tb €\n" 0 str,getRune "c" expect
  "cañón | a\tb €\n" 3 str,getRune "ó" expect
  "cañón | a\tb €\n" 13 str,getRune "\n" expect
  "" str,runes 0 expect
  "a" str,runes 1 expect
  "\n" str,runes 1 expect
  "ú" str,runes 1 expect
  "ñ" str,runes 1 expect
  "€" str,runes 1 expect
  "a b" str,runes 3 expect
  "a\nb" str,runes 3 expect
  "añb" str,runes 3 expect
  "a€b" str,runes 3 expect
  " a\tb €\n" str,runes 7 expect
  "" // u8target   rest rune
  "cañón | a\tb €\n" // u8source
  (dup size 0 >) (str,nextRune swap u8s = + u8s) while
  pop "cañón | a\tb €\n" expect

  "" str,toUnicode str,fromUnicode "" expect
  "a" str,toUnicode str,fromUnicode "a" expect
  "\n" str,toUnicode str,fromUnicode "\n" expect
  "ú" str,toUnicode str,fromUnicode "ú" expect
  "ñ" str,toUnicode str,fromUnicode "ñ" expect
  "€" str,toUnicode str,fromUnicode "€" expect
  "a b" str,toUnicode str,fromUnicode "a b" expect
  "a\nb" str,toUnicode str,fromUnicode "a\nb" expect
  "añb" str,toUnicode str,fromUnicode "añb" expect
  "a€b" str,toUnicode str,fromUnicode "a€b" expect
  " a\tb €\n" str,toUnicode str,fromUnicode " a\tb €\n" expect
  "cañón | a\tb €\n¶" str,toUnicode str,fromUnicode "cañón | a\tb €\n¶"
    expect

  "" str,fromIso "" expect
  "a" str,fromIso "a" expect
  "!!" str,fromIso "!!" expect
  "ñ" str,fromIso "ñ" != assert

  "cañón" str,toUpper "CAÑÓN" != assert
  "é" "f" > assert
  "é" "f" str,cmp 0 < ! assert
  "é" "f" str,greater? assert
  "es_ES.utf8" sys,setLocale
  sys,locale "es_ES.utf8" expect
  "cañón" str,toUpper "CAÑÓN" expect
  "CAÑÓN" str,toLower "cañón" expect
  "é" "f" > assert
  "é" "f" str,cmp 0 < assert
  "é" "f" str,greater? ! assert
  "C" sys,setLocale
  sys,locale "C" expect
  "CAÑÓN" str,toLower "cañón" != assert
  "é" "f" > assert
  "é" "f" str,cmp 0 < ! assert
  "é" "f" str,greater? assert

  `
  abc
   deñ
fg \n
  ` "abc\n deñ\nfg \\n\n" expect
  `
  abc` "abc" expect
  `|
  `abc`
  |` "`abc`\n" expect

  3 : n1 =
  4 : n2 =

  "Result: They are ${n1 n2 +} $. That's all."
    "Result: They are 7 $. That's all." expect

  `
  Result:
  They are ${n1 n2 +} $.
  That's all.`
    "Result:\nThey are 7 $.\nThat's all." expect

  empty? assert
) run
