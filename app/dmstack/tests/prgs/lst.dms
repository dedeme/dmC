// Copyright 08-Sep-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// List tests

(
  ["a", [1, 2], "b"] [[3, 4], "c"] +
    ["a", [1, 2], "b", [3, 4], "c"] expect

  () L0 =
  (23) L1 =
  (1, 2, 3, 4, 5, 6) L2 =

  (@i 2 % @i) odd =>
  (2 % !) even =>
  4 even assert
  5 odd assert

  // new - unary

  lst,new () == assert
  "a" lst,unary ("a") == assert

  // make - fill

  1 0 lst,make () expect
  "a" 1 lst,make ("a") expect
  1 3 lst,make (1, 1, 1) expect
  lst,new dup 1 lst,fill () expect
  "a" 1 lst,make dup "z" lst,fill ("z") expect
  1 3 lst,make dup 4 lst,fill (4, 4, 4) expect

  // push - push0 - pop - pop0 - peek - peek0

  () 23 lst,push+ L1 == assert
  (1) dup 2 lst,push (1, 2) == assert
  (1, 2, 3) 4 lst,push+ (1, 2, 3, 4) == assert
  () 23 lst,push0+ L1 == assert
  (1) 2 lst,push0+ (2, 1) == assert
  (1, 2, 3) dup 4 lst,push0 (4, 1, 2, 3) == assert
  (1) L =
  L lst,pop 1 == assert; L () == assert
  (1, 2, 3) L =
  L lst,pop 3 == assert; L (1, 2) == assert
  (1) L =
  L lst,pop0 1 == assert; L () == assert
  (1, 2, 3) L =
  L lst,pop0 1 == assert; L (2, 3) == assert
  (1) L =
  L lst,peek 1 == assert; L (1) == assert
  (1, 2, 3) L =
  L lst,peek 3 == assert; L (1, 2, 3) == assert
  (1) L =
  L lst,peek0 1 == assert; L (1) == assert
  (1, 2, 3) L =
  L lst,peek0 1 == assert; L (1, 2, 3) == assert

  // insert - insertList

  () dup 0 1 lst,insert (1) == assert
  (23) dup 0 1 lst,insert (1, 23) == assert
  (23) dup 1 1 lst,insert (23, 1) == assert
  (1, 2, 3) dup 0 99 lst,insert (99, 1, 2, 3) == assert
  (1, 2, 3) dup 2 99 lst,insert (1, 2, 99, 3) == assert
  (1, 2, 3) dup 3 99 lst,insert (1, 2, 3, 99) == assert
  () dup 0 () lst,insertList () == assert
  (23) dup 0 () lst,insertList (23) == assert
  (23) dup 1 () lst,insertList (23) == assert
  (1, 2, 3) dup 0 () lst,insertList (1, 2, 3) == assert
  (1, 2, 3) dup 2 () lst,insertList (1, 2, 3) == assert
  (1, 2, 3) dup 3 () lst,insertList (1, 2, 3) == assert
  () dup 0 (99) lst,insertList (99) == assert
  (23) dup 0 (99) lst,insertList (99, 23) == assert
  (23) dup 1 (99) lst,insertList (23, 99) == assert
  (1, 2, 3) dup 0 (99) lst,insertList (99, 1, 2, 3) == assert
  (1, 2, 3) dup 2 (99) lst,insertList (1, 2, 99, 3) == assert
  (1, 2, 3) dup 3 (99) lst,insertList (1, 2, 3, 99) == assert
  () dup 0 (77, 88, 99) lst,insertList (77, 88, 99) == assert
  (23) dup 0 (77, 88, 99) lst,insertList (77, 88, 99, 23) == assert
  (23) dup 1 (77, 88, 99) lst,insertList (23, 77, 88, 99) == assert
  (1, 2, 3) dup 0 (77, 88, 99) lst,insertList (77, 88, 99, 1, 2, 3) == assert
  (1, 2, 3) dup 2 (77, 88, 99) lst,insertList (1, 2, 77, 88, 99, 3) == assert
  (1, 2, 3) dup 3 (77, 88, 99) lst,insertList (1, 2, 3, 77, 88, 99) == assert

  // remove - removeRange

  (23) dup 0 lst,remove () == assert
  (1, 2, 3) dup 0 lst,remove (2, 3) == assert
  (1, 2, 3) dup 1 lst,remove (1, 3) == assert
  (1, 2, 3) dup 2 lst,remove (1, 2) == assert
  (23) dup 0, 1 lst,removeRange () == assert
  (1, 2, 3) dup 0, 1 lst,removeRange (2, 3) == assert
  (1, 2, 3) dup 1, 2 lst,removeRange (1, 3) == assert
  (1, 2, 3) dup 2, 3 lst,removeRange (1, 2) == assert
  (1, 2, 3) dup 0, 2 lst,removeRange (3) == assert
  (1, 2, 3) dup 1, 3 lst,removeRange (1) == assert
  (1, 2, 3) dup 0, 3 lst,removeRange () == assert

  // clear

  L0 clone dup lst,clear L0 == assert
  L1 clone dup lst,clear L0 == assert
  L2 clone dup lst,clear L0 == assert

  // reverse - shuffle

  () dup lst,reverse () == assert
  (23) dup lst,reverse (23) == assert
  (1, 2, 3) dup lst,reverse (3, 2, 1) == assert

  () dup lst,shuffle () == assert
  (23) dup lst,shuffle (23) == assert
  // (1, 2, 3) dup lst,shuffle Ls = (i =; Ls i get puts) ((3)) for

  // sort

  () dup (>) lst,sort () == assert
  >:& f =>
  (23) dup (f) lst,sort (23) == assert
  (1, 3, 2) dup (f) lst,sort (1, 2, 3) == assert

  // duplicates

  () (==) lst,duplicates ((), ()) == assert
  (1, 2, 3) (==) lst,duplicates ((), (1, 2, 3)) == assert
  (1, 1, 2, 1, 3, 2) (==) lst,duplicates ((1, 2), (1, 2, 3)) == assert

  // any - all

  () (3 <) lst,any? ! assert
  () (3 <) lst,all? assert
  (1, 2) (3 <) lst,any? assert
  (1, 2) (3 <) lst,all? assert
  (1, 5, 2) (3 <) lst,any? assert
  (1, 5, 2) (3 <) lst,all? ! assert
  (5, 6, 7) (3 <) lst,any? ! assert
  (5, 6, 7) (3 <) lst,all? ! assert

  // each - eachIx

  0 [1, 2, 3] (+) lst,each 6 == assert
  0 [10, 20, 30] (+ +) lst,eachIx 63 == assert
  "" ["a", "b", "c"] (toStr + +) lst,eachIx "a0b1c2" == assert

  // eq - neq

  () () (==) lst,eq? assert
  ("a") () (==) lst,neq? assert
  () ("a") (==) lst,neq? assert
  ("a" 1 "b") ("a" 1) (==) lst,neq? assert
  ("a" 1 "b") ("a" 1 "b") (==) lst,eq? assert
  ("b" 1 "b") ("a" 1 "b") (==) lst,neq? assert
  ("a" 1 "b") ("a" 1 "a") (==) lst,neq? assert
  ("a" 1 "b") ("a" 1 "b" "c") (==) lst,neq? assert

  // index - indexf - lastIndex - lastIndexf

  () 23 lst,index -1 == assert
  (23) 23 lst,index 0 == assert
  (1, 2, 3) 23 lst,index -1 == assert
  (1, 2, 3) 1 lst,index 0 == assert
  (1, 2, 3) 2 lst,index 1 == assert
  (1, 2, 3) 3 lst,index 2 == assert
  () (23 ==) lst,indexf -1 == assert
  (23) (23 ==) lst,indexf 0 == assert
  (1, 2, 3) (23 ==) lst,indexf -1 == assert
  (1, 2, 3) (1 ==) lst,indexf 0 == assert
  (1, 2, 3) (2 ==) lst,indexf 1 == assert
  (1, 2, 3) (3 ==) lst,indexf 2 == assert

  () 23 lst,lastIndex -1 == assert
  (23) 23 lst,lastIndex 0 == assert
  (1, 2, 3) 23 lst,lastIndex -1 == assert
  (1, 2, 3) 1 lst,lastIndex 0 == assert
  (1, 2, 1) 1 lst,lastIndex 2 == assert
  (1, 2, 3) 2 lst,lastIndex 1 == assert
  (1, 3, 2, 3, 4) 3 lst,lastIndex 3 == assert
  () (23 ==) lst,lastIndexf -1 == assert
  (23) (23 ==) lst,lastIndexf 0 == assert
  (1, 2, 3) (23 ==) lst,lastIndexf -1 == assert
  (1, 2, 3) (1 ==) lst,lastIndexf 0 == assert
  (1, 2, 1) (1 ==) lst,lastIndexf 2 == assert
  (1, 2, 3) (2 ==) lst,lastIndexf 1 == assert
  (1, 3, 2, 3, 4) (3 ==) lst,lastIndexf 3 == assert

  // find

  () (2 %) lst,find () == assert
  (23) (2 %) lst,find (23) == assert
  (1, 2, 3) (2 %) lst,find (1) == assert
  () (2 % !) lst,find () == assert
  (23) (2 % !) lst,find () == assert
  (1, 2, 3) (2 % !) lst,find (2) == assert

  // reduce

  L0 100 (-) lst,reduce 100 == assert
  L1 100 (-) lst,reduce 77 == assert
  L2 100 (-) lst,reduce 79 == assert

  // flat

  L0 lst,flat L0 expect
  L1 lst,flat L1 expect
  L2 lst,flat L2 expect
  [L0, L1, L2] data lst,flat [23, 1, 2, 3, 4, 5, 6] expect

  // drop - dropf

  L0 0 lst,drop L0 == assert
  L1 0 lst,drop L1 == assert
  L2 0 lst,drop L2 == assert
  L0 1 lst,drop L0 == assert
  L1 1 lst,drop L0 == assert
  L2 1 lst,drop (2, 3, 4, 5, 6) == assert
  L0 4 lst,drop L0 == assert
  L1 4 lst,drop L0 == assert
  L2 4 lst,drop (5, 6) == assert
  L0 40 lst,drop L0 == assert
  L1 40 lst,drop L0 == assert
  L2 40 lst,drop L0 == assert

  L0 odd:& lst,dropf L0 == assert
  L1 odd:& lst,dropf L0 == assert
  L2 odd:& lst,dropf (2, 3, 4, 5, 6) == assert
  L0 even:& lst,dropf L0 == assert
  L1 even:& lst,dropf L1 == assert
  L2 even:& lst,dropf L2 == assert
  (2, 4, 8, 1) even:& lst,dropf (1) == assert
  (2, 4, 8, 10) even:& lst,dropf () == assert

  // filter

  L0 odd:& lst,filter L0 == assert
  L1 odd:& lst,filter (23) == assert
  L2 odd:& lst,filter (1, 3, 5) == assert
  L0 even:& lst,filter L0 == assert
  L1 even:& lst,filter L0 == assert
  L2 even:& lst,filter (2, 4, 6) == assert
  (2, 4, 8, 1) even:& lst,filter (2, 4, 8) == assert
  (2, 4, 8, 10) even:& lst,filter (2, 4, 8, 10) == assert

  // take - takef

  L0 0 lst,take L0 == assert
  L1 0 lst,take L0 == assert
  L2 0 lst,take L0 == assert
  L0 1 lst,take L0 == assert
  L1 1 lst,take L1 == assert
  L2 1 lst,take (1) == assert
  L0 4 lst,take L0 == assert
  L1 4 lst,take L1 == assert
  L2 4 lst,take (1, 2, 3, 4) == assert
  L0 40 lst,take L0 == assert
  L1 40 lst,take L1 == assert
  L2 40 lst,take L2 == assert

  L0 odd:& lst,takef L0 == assert
  L1 odd:& lst,takef L1 == assert
  L2 odd:& lst,takef (1) == assert
  L0 even:& lst,takef L0 == assert
  L1 even:& lst,takef L0 == assert
  L2 even:& lst,takef L0 == assert
  (2, 4, 8, 1) even:& lst,takef (2, 4, 8) == assert
  (2, 4, 8, 10) even:& lst,takef (2, 4, 8, 10) == assert

  // map

  L0 (2 *) lst,map L0 == assert
  L1 (2 *) lst,map (46) == assert
  L2 (2 *) lst,map (2, 4, 6, 8, 10, 12) == assert

  // zip - zip3

  L0 L0 lst,zip () == assert
  L0 L1 lst,zip () == assert
  L0 L2 lst,zip () == assert
  L1 L0 lst,zip () == assert
  L1 L1 lst,zip ((23, 23)) == assert
  L1 L2 lst,zip ((23, 1)) == assert
  L2 L0 lst,zip () == assert
  L2 L1 lst,zip ((1, 23)) == assert
  L2 L2 lst,zip ((1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)) == assert
  L2 L0 L2 lst,zip3 () == assert
  L2 L1 L2 lst,zip3 ((1, 23, 1)) == assert
  L2 L2 L2 lst,zip3
    ((1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4), (5, 5, 5), (6, 6, 6)) == assert
  () lst,unzip ((), ()) == assert
  ((1, 3)) lst,unzip ((1), (3)) == assert
  ((1, "a"), (2, "b")) lst,unzip ((1, 2), ("a", "b")) == assert
  () lst,unzip3 ((), (), ()) == assert
  ((1, 3, 5)) lst,unzip3 ((1), (3), (5)) == assert
  ((1, "a", (1.)), (2, "b", (2.))) lst,unzip3
    ((1, 2), ("a", "b") ((1.), (2.))) == assert

  // sub - left - right

  ["a", "b"] 1 lst,left R = ["a"] R == assert
  R ["b"] + -2 -1 lst,sub R = ["a"] R == assert
  R ["b"] + 0 0 lst,sub R = [] R == assert
  R ["a", "b"] + -1 0 lst,sub R = [] R == assert
  R ["a", "b"] + 2 2 lst,sub R = [] R == assert
  R ["a", "b"] + 0 2 lst,sub R = ["a", "b"] R == assert
  R 1 2 lst,sub R = ["b"] R == assert
  R 1 lst,right R = [] R == assert
  R ["a", "b"] + 0 lst,right R = ["a", "b"] R == assert
  R -1 lst,right R = ["b"] R == assert
  [] 0 lst,left [] == assert
  ["a", "b", "c"] 0 lst,left [] == assert
  ["a", "b", "c"] 1 lst,left ["a"] == assert
  ["a", "b", "c"] 3 lst,left ["a", "b", "c"] == assert
  [] 0 lst,right [] == assert
  ["a", "b", "c"] 0 lst,right ["a", "b", "c"] == assert
  ["a", "b", "c"] 1 lst,right ["b", "c"] == assert
  ["a", "b", "c"] 3 lst,right [] == assert
  L0 lst,copy : Copy =
  Copy L0 expect
  Copy "1" lst,push+ L0 != assert
  L1 lst,copy : Copy =
  Copy L1 expect
  Copy "1" lst,push+ L1 != assert
  L2 lst,copy : Copy =
  Copy L2 expect
  Copy "1" lst,push+ L2 != assert

  // fromJs - toJs

  [] (js,ws) lst,toJs "[]" == assert
  ["a"] (js,ws) lst,toJs "[\"a\"]" == assert
  ["a", "b", "c"] (js,ws) lst,toJs "[\"a\",\"b\",\"c\"]" == assert

  [] (js,ws) lst,toJs (js,rs) lst,fromJs [] == assert
  ["a"] (js,ws) lst,toJs (js,rs) lst,fromJs ["a"] == assert
  ["a", "b", "c"] (js,ws) lst,toJs (js,rs) lst,fromJs ["a", "b", "c"] == assert

  empty? assert
) run
