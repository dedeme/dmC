// Copyright 07-Sep-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Loop tests
(

  1 1 == (1 assert) if
  "a" "" == (0 assert) if

  "a" "a" == (1 assert) (0 assert) elif
  "a" "a" != (0 assert) (1 assert) elif

  ("a" "a" ==) (1 assert) else (0 assert) if
  ("a" "a" !=) (0 assert) else (1 assert)  if

  (2 1 >=) ("abc") else ("") if "abc" == assert
  (2 1 >) ("abc") else ("") if "abc" == assert

  (0) (0 assert) else (0) (0 assert) else (1 assert) if
  (0) (0 assert) else (1) (1 assert) else (0 assert) if
  (1) (1 assert) else (0) (0 assert) else (0 assert) if
  (1) (1 assert) else (1) (0 assert) else (0 assert) if
  1 (0) (pop 0) else (1) (pop 1) else if assert
  1 (1) (pop 1) else (0) (pop 0) else if assert

  (2 1 >=) ("abc") else (0) ("de") else ("") if "abc" expect
  (2 1 <) ("abc") else (0) ("de") else ("") if "" expect
  (2 1 <) ("abc") else (1) ("de") else ("") if "de" expect

  // "Loop (1): " sys,print; clock,now C1 =
  0 // sum
  0 // c
  ( dup 10 < (c =; c +; c 1 +) (pop; break) elif)
  loop
  45 == assert
  // clock,now C1 clock,- 1 get long,toInt puts

  // "Loop (2): " sys,print; clock,now C1 =
  0 // sum
  0 // c
  ( dup (10 <) (c =; c +; c 1 +) else (pop; break) if)
  loop
  45 == assert
  // clock,now C1 clock,- 1 get long,toInt puts

  // "While: " sys,print; clock,now C1 =
  0 // sum
  0 // c
  (dup 10 <) (c =; c +; c 1 +) while
  pop 45 == assert
  // clock,now C1 clock,- 1 get long,toInt puts

  // "While to 4 (1): " sys,print; clock,now C1 =
  0 // sum
  0 // c
  (dup 10 <) (dup 4 > (break) (c = c +; c 1 +) elif) while
  pop 10 == assert
  // clock,now C1 clock,- 1 get long,toInt puts

  // "For: " sys,print; clock,now C1 =
  0 // sum
  10 (i =; i +) for
  45 == assert
  // clock,now C1 clock,- 1 get long,toInt puts

  // "For to 4 (1): " sys,print; clock,now C1 =
  0 // sum
  0 // counter
  (10) (dup (4 >) (i =; break) else (i =; c =; i +; i) if) for pop
  10 == assert
  // clock,now C1 clock,- 1 get long,toInt puts

  // "For (2): " sys,print; clock,now C1 =
  0 // sum
  (2 10) (i =; i +) for
  44 == assert
  // clock,now C1 clock,- 1 get long,toInt puts

  // "For (3): " sys,print; clock,now C1 =
  0 // sum
  (9 -1 -1) (i =; i +) for
  45 == assert
  // clock,now C1 clock,- 1 get long,toInt puts

  // Value volatil
  3
  ( i =;
    ["a"] 3 lst,push+; L =;
    i 0 != (L ["a", 3] != assert) if
  )
  for

  // Value NO volatil
  (3)
  ( i =;
    ["a"] clone 3 lst,push+; L =;
    L ["a", 3] == assert
  )
  for

  // Value NO volatil
  3
  ( i =;
    ["a"] data 3 lst,push+; L =;
    L ["a", 3] == assert
  )
  for

  // Value volatil
  3
  ( i =;
    [5] L =; L 0 : L 0 get 1 + : set
    L i 6 + lst,unary == assert
  )
  for

  // Value NO volatil
  3
  ( i =;
    [5] clone L =; L 0 : L 0 get 1 + : set
    L [6] == assert
  )
  for

  // Value NO volatil
  3
  ( i =;
    [5] data L =; L 0 : L 0 get 1 + : set
    L [6] == assert
  )
  for

  // Value NO volatil
  3
  ( i =;
    [5] clone blob,from B =; B 0 : B 0 blob,get 1 + : blob,set
    B [6] blob,from blob,== assert
  )
  for

  // Value NO volatil
  3
  ( i =;
    [5] data blob,from B =; B 0 : B 0 blob,get 1 + : blob,set
    B [6] blob,from blob,== assert
  )
  for

  empty? assert

) run
