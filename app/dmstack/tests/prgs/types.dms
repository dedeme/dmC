// Copyright 02-Oct-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

(@+i:: 3 == assert @-) fn =>
3 fn

(@+f:: 3. == assert @-) fn =>
3. fn

(@+iff:: n3 =; n2 =; n1 =; @ n1 n2 + n3 == @?i @|ii assert assert @-) fn =>
2 3. 5. fn

(@+<Blob>i:: ix =; ix blob,get 10 == assert @-) fn =>
[10] blob,from 0 fn

(@+ms key =; key map,get 10 == assert @-) fn =>
{"a", 10, "b", 4} map,from "a" fn

(@+fli ix =; ix lst,get "10" == assert pop @-) fn =>
5. ["10", 2 blob,new, 3] data 0 fn

5. @?f assert @f float,toInt ("Int") ("Other") elif "Int" == assert

@+
5. @?f assert @|f float,toInt ("Int") ("Other") elif "Int" == assert
@-

(@+roe E =; O =; R =
  R >> 3 expect
  O ( 2 expect) ( 0 assert) wrap,option
  E ( 1 expect) ( 0 assert) wrap,either
@-) wraps =>

3 wrap,ref : 2 wrap,some : 1 wrap,right : wraps

empty? assert
