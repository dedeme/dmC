// Copyright 07-Sep-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Sys tests.

(
  () blob,from B0 =
  (1, 2, 3) blob,from B3 =

  1 a =; a clone b =; a b == assert
  1.6 a =; a clone b =; a b == assert
  "" a =; a clone b =; a b == assert
  "abc" a =; a clone b =; a b == assert
  B0:& A =; A:& clone B =; A:& B == assert
  B3:& A =; A:& clone B =; A:& B:& == assert
  () A =; A:& clone B =; A:& B:& == assert
  [1, 1.56, (23 ()) "abc"] A =; A:& clone B =; A:& B:& == assert
  A:& 3 "four" set+ 0 "zero" set
  A:& 0 get "zero" == assert
  A:& 3 get "four" == assert

  "" size ! assert
  "abc" size 3 == assert

  B0:& blob,size ! assert
  B3:& blob,size 3 == assert
  B3:& 1 blob,get 2 == assert
  B3:& dup 2 blob,get swap 0 blob,get; assert; 3 == assert

  B0:& blob,to size ! assert
  B3 blob,to size 3 == assert
  B3 blob,to 1 get 2 == assert
  B3 blob,to dup 2 get swap 0 get; assert; 3 == assert
  B3 0 10 blob,set+ 2 12 blob,set
  B3 0 blob,get 10 == assert
  B3 2 blob,get 12 == assert

  () size ! assert
  [1, 1.5, "a", []] Ls =
  Ls size 4 == assert
  Ls 1 get 1.5 == assert
  Ls dup 3 get swap 0 get; assert; size ! assert

  (4 6 +) run 10 == assert

  "()" eval () == assert
  "4 3 +" eval 7 == assert
  "(4 3 +) run" eval 7 == assert
  "\"(4, 3, +)\" eval run" eval 7 == assert

  8 n =
  ("a") A =
  (4 + 2 -) fn =
  [ 4, 3 n +, A "b" lst,push+, 7 fn ] data
    (4, 11, ("a", "b"), 9) == assert

  { ("1": 4), ("2": 3 n +) data, ("3": 7 fn) data } data
    (("1", 4), ("2", 11), ("3", 9)) == assert

  [4] data Ref =
  Ref >> 4 == assert
  Ref 2 <<+; >> 2 == assert
  Ref 10 <<; Ref >> 10 == assert
  Ref (2 *) ^^+; >> 20 == assert
  Ref (2 +) ^^; Ref >> 22 == assert

  empty? assert
) run
