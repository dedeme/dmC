// Copyright 07-Sep-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Sys tests.

"blob" import

() blob.from .b0 =
(1, 2, 3) blob.from b3 =

1 a =; a clone b =; a b == assert
1.6 a #; a clone b #; a b == assert
"" a #; a clone b #; a b == assert
"abc" a #; a clone b #; a b == assert
.b0:& a #; a:& clone b #; a:& b:& == assert
b3:& a #; a:& clone b #; a:& b:& == assert
() A =; A:& clone B =; A:& B:& == assert
[1, 1.56, (23 ()) "abc"] A #; A:& clone B #; A:& B:& == assert
A:& 3 "four" set 0 "zero" set stk.pop
A:& 0 get "zero" == assert
A:& 3 get "four" == assert

"" size ! assert
"abc" size 3 == assert

.b0:& size ! assert
b3:& size 3 == assert
b3:& 1 get 2 == assert
b3:& stk.dup 2 get stk.swap 0 get; assert; 3 == assert

.b0 blob.to size ! assert
b3 blob.to size 3 == assert
b3 blob.to 1 get 2 == assert
b3 blob.to stk.dup 2 get stk.swap 0 get; assert; 3 == assert
b3 0 10 set 2 12 set stk.pop
b3 0 get 10 == assert
b3 2 get 12 == assert

() size ! assert
[1, 1.5, "a", []] Ls =
Ls size 4 == assert
Ls 1 get 1.5 == assert
Ls stk.dup 3 get stk.swap 0 get; assert; size ! assert

(4 6 +) run 10 == assert

1 v =; v 1 == assert
(
  2 v =; v 2 == assert
  (3 v =; v 3 == assert; 1 v #; v 1 == assert) run
  v 2 == assert
) run
v 1 == assert

stk.empty? assert
