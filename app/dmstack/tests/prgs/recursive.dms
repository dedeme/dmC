// Copyright 15-Sep-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Recursive tests

(
  // "start" print

  ((dup 1 - sum +) ( dup) if)
  sum =>
  // "Recursive not tail function" print
  6 sum 21 == assert

  (
    (( pop) else ( n =; n +, n 1 - : sum1) ( dup ) if)
    sum1 =>
    0 swap sum1
  ) sum =>
  // "Recursive tail function" print
  6 sum 21 == assert

  ( ( (pop; break)
      else
      (n =; r =; r n +, n 1 -)
      (dup 1 >) if
    ) sum1 =>
    n =; 1 n sum1:& loop
  ) sum =>
  // "Recursive tail function to loop" print
  6 sum 21 == assert

  (1 + it,range0 R =; 0 R (+) it,each) sum =>
  // "Range" print
  6 sum 21 == assert

  (n =; 0 (i =; i +) (n 1 +) for) sum =>
  // "for" print
  6  sum 21 == assert

  ( 1 swap
    ( (pop; break)
      else
      (n =; n +; n 1 -)
      (dup 1 >) if
    ) loop
  ) sum =>
  // "loop" print
  6  sum 21 == assert


  ( 1 swap
    (n =; n +; n 1 -)
    (dup 1 >) while
    pop
  ) sum =>
  // "while" print
  6  sum 21 == assert
) run

empty? assert
