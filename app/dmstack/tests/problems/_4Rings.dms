// Copyright 22-Sept-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/*
( Row =
  7 (Row swap get toStr sys,print) for
  "" sys,println
) printRow =>

// Row ix value
( value =; ix =; Row =
  1 ix (i =; Row i get value == (pop 0 break) if) for
) newDigit? =>

(  wrap,tp3  // Row min max - min & max inclusive
  ( dup dup 0 get Row =
    1 get mn =
    2 get mx =
    Row size sz =
    sz 1 - // i
    (
      dup i =; i 0 < : i sz == : ||
      (break)
      (
        dup i =
        Row i get 1 + value =
        Row i value set

        value mx >
        ( 1 -)
        (
          Row i value this,newDigit?
          (1 + i1 =; i1 sz < (Row i1 mn 1 - set) if; i1)
          if
        )
        elif
      )
      elif
    ) loop
    sz == (Row clone lst,unary) (lst,new) elif
  )
  it,new
) mkIt =>

( Row =
  Row 0 get a =
  Row 1 get b =
  Row 2 get c =
  Row 3 get d =
  Row 4 get e =
  Row 5 get f =
  Row 6 get g =

  a b + r1 =
  b c d + + r2 =
  d e f + + r3 =
  f g + r4 =

  (r1 r2 !=) (0) else (r1 r3 !=) (0) else (r1 r4 !=) (0) else (1) if
) filter =>
*/

( @<Blob> :: Row =
  7 (Row swap blob,get toStr sys,print) for
  "" sys,println
@ ) printRow =>

// Row ix value
( @ii<Blob> :: value =; ix =; Row =
  1 ix (i =; Row i blob,get value == (pop 0 break) if) for
@i ) newDigit? =>

( @ii<Blob>
  wrap,tp3  // Row min max - min & max inclusive
  ( dup dup 0 get Row =
    1 get mn =
    2 get mx =
    Row blob,size sz =
    sz 1 - // i
    (
      dup i =; i 0 < : i sz == : ||
      (break)
      (
        dup i =
        Row i blob,get 1 + value =
        Row i value blob,set

        value mx >
        ( 1 -)
        (
          Row i value this,newDigit?
          (1 + i1 =; i1 sz < (Row i1 mn 1 - blob,set) if; i1)
          if
        )
        elif
      )
      elif
    ) loop
    sz == (Row blob,copy lst,unary) (lst,new) elif
  )
  it,new
@<Iterator>) mkIt =>

( @<Blob> :: Row =
  Row 0 blob,get a =
  Row 1 blob,get b =
  Row 2 blob,get c =
  Row 3 blob,get d =
  Row 4 blob,get e =
  Row 5 blob,get f =
  Row 6 blob,get g =

  a b + r1 =
  b c d + + r2 =
  d e f + + r3 =
  f g + r4 =

  (r1 r2 !=) (0) else (r1 r3 !=) (0) else (r1 r4 !=) (0) else (1) if
@i) filter =>

clock,now Cl =

"Solutions for 1 to 7" sys,println
[1, 2, 3, 4, 5, 6, 6] blob,from 1 7 mkIt It =
It (this,filter) it,filter
  (this,printRow) it,each

"\nSolutions for 3 to 9" sys,println
[3, 4, 5, 6, 7, 8, 8] blob,from 3 9 mkIt It =
It (this,filter) it,filter
  (this,printRow) it,each

clock,now Cl clock,df puts

/*
0
10
( a =
  10
  ( b =
    10
    ( c =
      10
      ( d =
        10
        ( e =
          10
          ( f =
            ( g =
              a b + r1 =
              b c d + + r2 =
              d e f + + r3 =
              f g + r4 =

              (1 +) (r1 r2 == r1 r3 == r1 r4 == && &&) if
            )
            for
          )
          for
        )
        for
      )
      for
    )
    for
  )
  for
)
for
puts
*/

@
