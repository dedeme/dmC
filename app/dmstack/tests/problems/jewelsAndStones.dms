// Copyright 06-Oct-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

( jewels =; stones =
  0 wrap,ref : C =;
  stones dup

  stones str,len
  (
    str,get
    jewels swap str,index : -1 : != (C (1 +) ^^) if
    dup
  )
  for

  pop pop
  C >>
) fn =>

( jewels =;
  0 wrap,ref : C =;
  ( str,nextRune dup "" !=)
  ( jewels swap str,index : -1 : != (C (1 +) ^^) if)
  while
  pop pop
  C >>
) fn2 =>

"With chars:" sys,println
"aAAbbbb" "aA" fn dup 3 expect toStr sys,println
"ZZ" "z" fn dup 0 expect toStr sys,println
"ZZ" "" fn dup 0 expect toStr sys,println
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" dup fn dup
  52 expect toStr sys,println

"\nWith runes:" sys,println
"aAAbbbb" "aA" fn2 dup 3 expect toStr sys,println
"ZZ" "z" fn2 dup 0 expect toStr sys,println
"ZZ" "" fn2 dup 0 expect toStr sys,println
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" dup fn2 dup
  52 expect toStr sys,println

empty? assert
