// Copyright 09-Oct-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

// Algorithme ------------------------------------------------------------------

( State =
  State .start : Ob =
  State .firstStep? : firstStep? =>
  State .stepEnd? : stepEnd? =>
  State .stepFail? : stepFail? =>
  State .win? : win? =>
  State .ahead? : ahead? =>
  State .back : back =>
  State .side : side =>
  0 wrap,ref Back? =

  (
    Ob stepEnd? : sEnd? =
    (sEnd? : Ob firstStep? : &&)
    ( 0; break)
    else
    ( sEnd?)
    ( Ob back; Back? 1 <<)
    else
    ( Back? >> : Ob stepFail? : ||)
    ( Ob side; Back? 0 <<)
    else
    ( Ob win?)
    ( 1; break)
    else
    ( Ob ahead? !)
    ( Back? 1 <<)
    else
    if
  ) loop
) fn =>

// Board -----------------------------------------------------------------------

[] data 8 (pop 0 8 lst,make lst,push+) for : Board =

(dup Board swap !0 lst,get : swap !1 lst,get)
bget => // <[row, col]> - <INT>

(dup Board swap !0 lst,get : swap !1 1 lst,set)
bput => // <[row, col]> - <>

(dup Board swap !0 lst,get : swap !1 0 lst,set)
bquit => // <[row, col]> - <>

(
  Board
  (7 -1 -1)
  ( row =;
    dup row lst,get
    8 (col = dup col lst,get toStr " " + sys,print) for pop "" sys,println)
  for
  pop
  "" sys,println
)
bshow =>

( st =; clone
  st 0 == (dup 0 swap : !0 2 + : lst,set+; dup 1 swap : !1 1 + : lst,set+) if
  st 1 == (dup 0 swap : !0 1 + : lst,set+; dup 1 swap : !1 2 + : lst,set+) if
  st 2 == (dup 0 swap : !0 -1 + : lst,set+; dup 1 swap : !1 2 + : lst,set+) if
  st 3 == (dup 0 swap : !0 -2 + : lst,set+; dup 1 swap : !1 1 + : lst,set+) if
  st 4 == (dup 0 swap : !0 -2 + : lst,set+; dup 1 swap : !1 -1 + : lst,set+) if
  st 5 == (dup 0 swap : !0 -1 + : lst,set+; dup 1 swap : !1 -2 + : lst,set+) if
  st 6 == (dup 0 swap : !0 1 + : lst,set+; dup 1 swap : !1 -2 + : lst,set+) if
  st 7 == (dup 0 swap : !0 2 + : lst,set+; dup 1 swap : !1 -1 + : lst,set+) if
) jump => // <[row, col], state> - <[row, col]>

// Path ------------------------------------------------------------------------

(
  Kpath lst,size
  ( i =
    i 1 + j =
    Kpath i lst,get !1 : Cs =
    j 10 < (" " j toStr +) (j toStr) elif
      ":[" + Cs !0 : "a" str,code : + :: str,fromCode +
      Cs !1 1 + toStr + "] " + sys,print
    i 4 % 3 == ("" sys,println) if
  )
  for
  "\n--------------------------------\n" sys,println
) kshow =>

(
  this,Kpath lst,peek : E =
  E !1 : E !0 : this,jump : Cs =
  this,Kpath [0, Cs] data lst,push
  Cs this,bput
) forwardStep => // Jump is tested as valid.

// First part ------------------------------------------------------------------

[[0, [0, 0] data] data] data : Kpath =
[0, 0] bput

( Cs =
  Cs !0 : r =
  Cs !1 : c =

  ( r 0 == c 4 == &&) ( 1) else
  ( r 1 == c 4 == &&) ( 1) else
  ( r 0 <) ( 0) else
  ( r 3 >) ( 0) else
  ( c 0 <) ( 0) else
  ( c 3 >) ( 0) else
  ( 1) if
) csOk => // <[row, col]> - <INT>

{
  "start": this,Kpath
  "firstStep?": (lst,size 1 ==)
  "stepEnd?": (lst,peek !0 : 8 : ==)
  "stepFail?":
    ( lst,peek : E =
      E !1 : E !0 : this,jump : Cs =

      Cs this,csOk
      ( Cs this,bget)
      ( 1)
      elif
    )
  "win?":
    ( Ob =
      Ob lst,size : sz =
      sz 17 <
      ( 0)
      (
        this,forwardStep
        Ob lst,peek !1 : Cs =
        Cs !0 : r =
        Cs !1 : c =
        r 0 == c 3 == &&
        ( 1)
        ( Ob lst,pop !1 this,bquit; 0)
        elif
      )
      elif
    )
  "ahead?":
    ( Ob =
      Ob lst,size 18 <
      ( this,forwardStep; 1)
      ( 0)
      elif
    )
  "back": (lst,pop !1 this,bquit)
  "side": (lst,peek 0 (1 +) lst,up)
} map,from fn pop

bshow
kshow

// Second part -----------------------------------------------------------------

Kpath [0, [2, 4] data] data lst,push
[2, 4] bput

( Cs =
  Cs !0 : r =
  Cs !1 : c =

  ( r 4 == c 4 == &&) ( 1) else
  ( r 4 == c 5 == &&) ( 1) else
  ( r 0 <) ( 0) else
  ( r 3 >) ( 0) else
  ( c 4 <) ( 0) else
  ( c 7 >) ( 0) else
  ( 1) if
)
csOk? => // <[row, col]> - <INT>

{
  "start": this,Kpath
  "firstStep?": (lst,size 19 ==)
  "stepEnd?": (lst,peek !0 : 8 : ==)
  "stepFail?":
    ( lst,peek : E =
      E !1 : E !0 : this,jump : Cs =

      Cs this,csOk?
      ( Cs this,bget)
      ( 1)
      elif
    )
  "win?":
    ( Ob =
      Ob lst,size : sz =
      sz 33 <
      ( 0)
      (
        this,forwardStep
        Ob lst,peek !1 : Cs =
        Cs !0 : r =
        r 2 <
        ( Ob lst,pop !1 this,bquit; 0)
        ( 1)
        elif
      )
      elif
    )
  "ahead?":
    ( Ob =
      Ob lst,size 34 <
      ( this,forwardStep; 1)
      ( 0)
      elif
    )
  "back": (lst,pop !1 this,bquit)
  "side": (lst,peek 0 (1 +) lst,up)
} map,from fn pop

bshow
kshow

// Third part ------------------------------------------------------------------

Kpath [0, [4, 6] data] data lst,push
[4, 6] bput

( Cs =
  Cs !0 : r =
  Cs !1 : c =

  ( r 4 <) ( 0) else
  ( r 7 >) ( 0) else
  ( c 0 <) ( 0) else
  ( c 7 >) ( 0) else
  ( 1) if
) csOk? => // <[row, col]> - <INT>


{
  "start": this,Kpath
  "firstStep?": (lst,size 35 ==)
  "stepEnd?": (lst,peek !0 : 8 : ==)
  "stepFail?":
    ( Ob =
      Ob lst,peek : E =
      E !1 : E !0 : this,jump : Cs =

      (Cs this,csOk? !) (1) else
      (Cs this,bget) (1) else
      (Ob lst,size 39 == : Cs [6, 5] != : &&) (1) else
      (Ob lst,size 47 == : Cs [6, 1] != : &&) (1) else
      (Ob lst,size 55 == : Cs [4, 3] != : &&) (1) else
      (0) if
    )
  "win?":
    ( Ob =
      Ob lst,size : sz =
      sz 63 <
      ( 0)
      ( this,forwardStep; 1)
      elif
    )
  "ahead?":
    ( Ob =
      Ob lst,size 64 <
      ( this,forwardStep; 1)
      ( 0)
      elif
    )
  "back": (lst,pop !1 this,bquit)
  "side": (lst,peek 0 (1 +) lst,up)
} map,from fn pop

bshow
kshow

empty? assert
