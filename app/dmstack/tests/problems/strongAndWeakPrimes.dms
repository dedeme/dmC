// Copyright 01-Oct-2019 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

( @+
  lst,new
  ( @+l:: L =
    L () ==
    (L 2 lst,push; 2 wrap,some)
    (
      L L size 1 - get 1 + wrap,ref : Next =
      ( Next >> pp =; pp int,toFloat math,sqrt float,toInt : lim =;
        0
        L size
        ( L swap get : p =;
          ( p lim >)
          ( break)
          else
          ( pp p % !)
          ( pop 1 break)
          else
          if
        )
        for
      )
      ( Next (++) ^^)
      while
      L Next >> lst,push
      Next
    )
    elif
  @-l)
  it,new
@-<Iterator>) primes =>

( @+l:: fn =>
  primes : P =
  P it,next wrap,ref : Pv =

  [P, Pv] data
  ( @+l
    O =;
    O 0 get : P =
    O 1 get : Pv =

    P it,next wrap,ref : Current =
    (Pv >> : P it,peek : + 2. / :: Current >> :: fn)
    (Pv Current >> <<; Current P it,next << )
    while
    Pv Current >> <<
    Current
  @-l)
  it,new
@-<Iterator>) strWeak =>

( >=:& strWeak @<Iterator> )
strongs =>

( <=:& strWeak @<Iterator> )
weaks =>

"First 36 strong primes:" sys,println
strongs 36 it,take (toStr " " + sys,print) it,each
"" sys,println

"Strong primes below 100,000: "
  strongs (1000 <) it,takef it,count toStr + sys,println

"First 37 weak primes:" sys,println
weaks 37 it,take (toStr " " + sys,print) it,each
"" sys,println

"Weaks primes below 100,000: "
  weaks (1000 <) it,takef it,count toStr + sys,println

empty? assert
