// Copyright 13-Feb-2018 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Internationalization management.
/// <h2>jsi18n Use</h2>
/// From command line use:
///   jsi18n <languages> <roots> <target>
/// For example:
///   jsi18n "en:es_ES" "src:/deme/lib/src" "./"
/// Note that different languages and roots are separated by ':'<br>
/// 'target' must be a directory with a subdirectoy called 'src'
/// <h2>Operations with jsi18n</h2>
/// jsi18n do next operations:
///   1. Create directory "i18n" in the target directory and inside it creates
///      so many files .txt as indicated <languages>.
///   2. Read all files ".js" in <roots> and all its subdirectories, extracting
///      those strings which have keys to translate.
///   3. Update .txt files.
///   4. Create-Update file "<target>/src/i18n.js"
/// <h2>Process of Use</h2>
/// jsi18n requires next using cycle:
///   1. Run jsi18n
///      (e.g.: jsi18n "en:es" "src:/deme/dmjs18/src/lib/basic" "./")
///   2. Modify .txt files translating keys
///   3. Rerun jsi18n to update "<target>/src/i18n.js"
///   4. Recompile sources (which will include "i18n.js")
/// <h2>Annotation of keys</h2>
/// You have to mark keys to translate using '_("key")'.<br>
/// For example:
///   fmt.Println(_("A message"))
/// The expression _(" must be written as is, without inner spaces or
/// tabulations.
/// <h2>Key Syntax</h2>
/// Keys are ordinary strings, but they must not include the character '='.
/// <h2>Translation Syntax</h2>
/// You have to put the translation after the first character '='.<br>
/// Translations must be written like strings in code.<br>
/// For example:
///   That is a \"problem\".\nDon't forget it.
/// Translations marked as "ORPHAN" have nonexistent keys. If there are no
/// error, they should be deleted.<br>
/// Keys marked as "TO DO" are pending translation.
/// <h2>Example of txt File</h2>
/// Example of file "es.txt":
///   # File generated by jsi18n.
///   # src/hello.js: 25
///   Hello = Hola
///   # src/hello.js: 48
///   problem = Esto es un \"problema\".\nNo olvidarlo.
///   # src/hello.go: 5
///   start = comienzo
/// Lines commented with '#' and keys are automatically written by jsi18n. User
/// should write only after "=".
/// <h2>Use of File i18n</h2>
/// i18n.js can be used by program following next process:
///   1. Calling 'I18n.xx()' with one of available dictionaries.
///      For example: I18n.es()
///   2. Use functions '_' and '_args' to write keys
/// If a key is not in dictionary, '_' and '_args' will yield such key without
/// modification; otherwise it will be translated.<br>
/// Example of use:
///   function main() {
///     I18n.es();
///     ...
///     console.log(_("Hello"));
///     ...
///     let day = "3";
///     let hour = "14";
///     console.log(_args(_("Day %0, at %1 p.m."), day, hour));
///     ...
///   }
///   =>
///   Hola
///   Dia 3, a las 14 p.m.
/// '_args' allows arguments '0' to '9'. Each argument matches a variable. '0'
/// matches the first variable, '1' the second and so on.<br>
/// Each argument can appear more than one time.


#ifndef JSI18N_H
  #define JSI18N_H

typedef struct pos_Pos Pos;

typedef struct apos_Apos Apos;
typedef struct ipos_Ipos Ipos;
#define TY Pos
#define FN pos
#include "dmc/tpl/tarr.h"
#undef TY
#undef FN

typedef struct oapos_Oapos Oapos;
typedef struct iapos_Iapos Iapos;
typedef struct mapos_Mapos Mapos;
#define TY Apos
#define FN apos
#include "dmc/tpl/topt.h"
#include "dmc/tpl/tmap.h"
#undef TY
#undef FN

///
int main (int argc, char **argv);

#endif
